apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  selector:
    app: flask-app
  ports:
  - port: 5000
    targetPort: 5000
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app-deployment
  labels:
    app: flask-app
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: flask-app
        image: aa12037/flask-app:latest
        ports:
          - containerPort: 5000
        env:
          - name: MONGO_HOST
            value: mongodb
          - name: MONGO_PORT
            value: "27017"
          - name: SIMULATE_FAILURE
            value: "false"
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz  # Add an endpoint in your app for health check (this can be a simple "OK" response)
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readiness  # Add an endpoint in your app to signal readiness (this can check DB or critical service availability)
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: flask-app-replica-controller
spec:
  replicas: 2
  selector:
    app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
        - name: flask-app
          image: aa12037/flask-app:latest
          ports:
            - containerPort: 5000
          env:
            - name: MONGO_HOST
              value: mongodb
            - name: MONGO_PORT
              value: "27017"
          imagePullPolicy: Always
